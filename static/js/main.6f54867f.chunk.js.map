{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","answer","new","add","minus","multiply","divide","sign","valueSwap","memory","addHandler","toggle","_this","i","j","setState","k","Math","round","Number","minusHandler","multiplyHandler","divideHandler","swapValueHandler","abs","enterNumberHandler","num","clearHandler","equalHandler","memPlusHandler","memRecallHandler","memClearHandler","pointHandler","includes","_this2","this","react_default","a","createElement","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f54867f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  //Properties and methods\n  state = {\n    answer: \"\",\n    new: \"\",\n    add: false,\n    minus: false,\n    multiply: false,\n    divide: false,\n    sign: \"\",\n    valueSwap: \"\",\n    memory: \"\"\n  }\n\n  addHandler = () => {\n    let toggle = this.state.add\n    let i = this.state.answer;\n    let j = this.state.new;\n\n    if (this.state.answer === \"\"){\n      this.setState({answer: j, new:\"\"});\n    }\n\n    if(toggle) {\n      if (j === \"\"){\n        this.setState({add: !toggle, sign: \"\"})\n      }\n      else{\n      let k = Math.round((Number(i) + Number(j)) * 10000) / 10000\n      this.setState({answer: k, new:\"\"})\n      }\n    } else {\n        if (this.state.minus){\n          let k = Math.round((Number(i) - Number(j)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", minus: false, sign: \"\"})\n        } else if (this.state.multiply){\n          let k = Math.round((Number(j) * Number(i)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", multiply: false, sign: \"\"})\n        } else if (this.state.divide) {\n          let k = Math.round((Number(i) / Number(j)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", divide: false, sign: \"\"})\n      }\n      this.setState({add: true, sign: \"+\"})\n    }\n    this.setState({minus: false, multiply:false, divide: false})\n  }\n\n  minusHandler = () => {    \n    let toggle = this.state.minus\n    let i = this.state.answer;\n    let j = this.state.new;\n\n    if (this.state.answer === \"\"){\n      this.setState({answer: j, new:\"\"});\n    }\n\n    if(toggle) {\n      if (j === \"\"){\n        this.setState({minus: !toggle, sign: \"\"})\n      }\n      else{\n      let k = Math.round((Number(i) - Number(j)) * 10000) / 10000\n      this.setState({answer: k, new:\"\"})\n      }\n    } else {\n        if (this.state.add){\n          let k = Math.round((Number(j) + Number(i)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", add: false, sign: \"\"})\n        } else if (this.state.multiply){\n          let k = Math.round((Number(j) * Number(i)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", multiply: false, sign: \"\"})\n        } else if (this.state.divide) {\n          let k = Math.round((Number(i) / Number(j)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", divide: false, sign: \"\"})\n      }\n\n      this.setState({minus: true, sign: \"-\"})\n    }\n    this.setState({add: false, multiply:false, divide: false})\n  }\n\n  multiplyHandler = () => {\n\n    let toggle = this.state.multiply\n    let i = this.state.answer;\n    let j = this.state.new;\n\n    if (this.state.answer === \"\"){\n      this.setState({answer: j, new:\"\"});\n    }\n\n    if(toggle) {\n      if (j === \"\"){\n        this.setState({multiply: !toggle, sign: \"\"})\n      }\n      else{\n      let k = Math.round((Number(j) *  Number(i)) * 10000) / 10000\n      this.setState({answer: k, new:\"\"})\n      }\n    } else {\n        if (this.state.minus){\n          let k = Math.round((Number(i) - Number(j)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", minus: false, sign: \"\"})\n        } else if (this.state.add){\n          let k = Math.round((Number(j) + Number(i)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", add: false, sign: \"\"})\n        } else if (this.state.divide) {\n          let k = Math.round((Number(i) / Number(j)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", divide: false, sign: \"\"})\n      }\n      this.setState({multiply: true, sign: \"x\"})\n    }\n    this.setState({minus: false, add:false, divide: false})\n  }\n\n  divideHandler = () => {\n    let toggle = this.state.divide\n    let i = this.state.answer;\n    let j = this.state.new;\n\n    if (this.state.answer === \"\"){\n      this.setState({answer: j, new:\"\"});\n    }\n\n    if(toggle) {\n      if (j === \"\"){\n        this.setState({divide: !toggle, sign: \"\"})\n      }\n      else{\n      let k = Math.round((Number(i) /  Number(j)) * 10000) / 10000\n      this.setState({answer: k, new:\"\"})\n      }\n    } else {\n        if (this.state.minus){\n          let k = Math.round((Number(i) - Number(j)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", minus: false, sign: \"\"})\n        } else if (this.state.add){\n          let k = Math.round((Number(j) + Number(i)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", add: false, sign: \"\"})\n        } else if (this.state.multiply) {\n          let k = Math.round((Number(j) * Number(i)) * 10000) / 10000\n          this.setState({answer: k, new:\"\", multiply: false, sign: \"\"})\n      }\n      this.setState({divide: true, sign: \"÷\"})\n    }\n    this.setState({minus: false, add:false, multiply: false})\n  }\n\n  swapValueHandler = () => {\n    let i = this.state.new\n    if(i !== \"\"){\n      if (i < 0){\n        let j = Math.abs(i)\n        this.setState({new:j})\n    } else {\n        this.setState({new: i * -1})\n    }\n  }\n  }\n\n  enterNumberHandler = (num) => {\n    let i = this.state.new\n    let j = i + num\n    this.setState({new: j})\n  }\n\n  clearHandler = () => {\n    if (this.state.new === \"\" && this.state.sign === \"\"){\n      this.setState({\n      answer:\"\", \n      new: \"\",\n      sign:\"\", \n      add: false,\n      minus: false,\n      multiply: false,\n      divide: false,})\n    } else{\n    this.setState({\n      new:\"\",\n      add: false,\n      minus: false,\n      multiply: false,\n      divide: false,\n      sign:\"\"})\n    }\n  }\n\n  equalHandler = () => {\n    let i = this.state.answer;\n    let j = this.state.new;\n    if (this.state.add){\n      let k = Math.round((Number(j) + Number(i)) * 10000) / 10000\n      this.setState({answer: k, new:\"\", add: false, sign: \"\"})\n    } else if (this.state.minus){\n      let k = Math.round((Number(i) - Number(j)) * 10000) / 10000\n      this.setState({answer: k, new:\"\", minus: false, sign: \"\"})\n    } else if (this.state.multiply){\n      let k = Math.round((Number(j) * Number(i)) * 10000) / 10000\n      this.setState({answer: k, new:\"\", multiply: false, sign: \"\"})\n    } else if (this.state.divide){\n      let k = Math.round((Number(i) / Number(j)) * 10000) / 10000\n      this.setState({answer: k, new:\"\", divide: false, sign: \"\"})\n    } else {\n    }\n  }\n\n  memPlusHandler = () => {\n    let i = this.state.answer\n    this.setState({memory: i})\n  }\n\n  memRecallHandler = () => {\n    let i = this.state.memory\n    this.setState({new: i})\n  }\n\n  memClearHandler = () => {\n    this.setState({memory: \"\"})\n  }\n\n  pointHandler = () => {\n    let i = this.state.new\n    let j = i.includes(\".\")\n    if (!j) {\n      if (i === \"\"){\n      this.setState({new:\"0.\"})\n      } else {\n      this.setState({new: i + \".\"})\n      }\n    }\n  }\n\n\n  //Render page\n  render() {\n    \n    //JS logic\n    \n\n    \n\n\n    //Return Statement\n    return (\n      <div className=\"App\">\n       <button onClick={this.addHandler} className=\"add\">+</button>\n       <button onClick={this.minusHandler} className=\"minus\">-</button>\n       <button onClick={this.multiplyHandler} className=\"multiply\">×</button>\n       <button onClick={this.divideHandler} className=\"divide\">÷</button>\n       <button onClick={this.swapValueHandler} className=\"swap\">+/−</button>\n       <button onClick={this.pointHandler} className=\"point\">.</button>\n       <button onClick={() => this.enterNumberHandler(0)} className=\"zero\">0</button>\n       <button onClick={() => this.enterNumberHandler(1)} className=\"one\">1</button>\n       <button onClick={() => this.enterNumberHandler(2)} className=\"two\">2</button>\n       <button onClick={() => this.enterNumberHandler(3)} className=\"three\">3</button>\n       <button onClick={() => this.enterNumberHandler(4)} className=\"four\">4</button>\n       <button onClick={this.equalHandler} className=\"equal\">=</button>\n       <button onClick={() => this.enterNumberHandler(5)} className=\"five\">5</button>\n       <button onClick={() => this.enterNumberHandler(6)} className=\"six\">6</button>\n       <button onClick={() => this.enterNumberHandler(7)} className=\"seven\">7</button>\n       <button onClick={() => this.enterNumberHandler(8)} className=\"eight\">8</button>\n       <button onClick={() => this.enterNumberHandler(9)} className=\"nine\">9</button>\n       <button onClick={this.clearHandler} className=\"clear\">CLEAR</button>\n       <button onClick={this.memPlusHandler} className=\"plusM\">M+</button>\n       <button onClick={this.memRecallHandler} className=\"rCallM\">MR</button>\n       <button onClick={this.memClearHandler} className=\"clearM\">MC</button>\n       <h1 className=\"answer\">{this.state.answer}</h1>\n       <h1 className=\"working\">{this.state.sign}        {this.state.valueSwap}   {this.state.new}</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}